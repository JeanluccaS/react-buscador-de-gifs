{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GiftExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categorias","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GiftExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAkB9C,OACI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAA+BO,OAC7CN,EAAc,MAOlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SApBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCJjBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEdC,EAFc,iDAEkCC,UAAUH,GAF5C,8DAGII,MAAMF,GAHV,cAGdG,EAHc,gBAIGA,EAAUC,OAJb,uBAIZC,EAJY,EAIZA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVtB,kBAabM,GAba,4CAAH,sDCDRO,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAMV,EAAU,EAAVA,IAGhC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAMf,EAAKgB,IAAMN,IACtB,mBAAGI,UAAU,OAAb,SAAqBJ,QCHpBO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECKb,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KA6BtC,OArBAC,qBAAU,WAENxB,EAAQC,GACHwB,MAAK,SAAAC,GAEFC,YAAW,WAEPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAGd,UAOZ,CAACpB,IAEGqB,EDhCyBM,CAAa3B,GAAhCa,EAFwB,EAE7BN,KAAYa,EAFiB,EAEjBA,QAEpB,OACI,qCACI,qBAAIJ,UAAU,wCAAd,cAAyDhB,EAAzD,OACCoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAER,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEQA,GADCA,EAAIC,aE4B1BiB,EAzCO,WAAO,IAAD,EAGY1C,mBAAS,CAAC,WAHtB,mBAGjB2C,EAHiB,KAGL5C,EAHK,KAiBxB,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,uBACA,6BAEQ4C,EAAWpB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEAA,SAAUA,GADLA,Y,MC1B7B8B,IAASC,OAEP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2a248fc4.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleImputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories((categorias) => [inputValue,...categorias]);\r\n            setInputValue('');\r\n        }\r\n\r\n        // setCategories( (categorias)=> [...categorias,inputValue]); \r\n    }\r\n    //es importante saber, que el form ya es agrupador de por si, lo importante es tener un agrupador de elementos puede ser un div tambien \r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleImputChange}\r\n            />\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\n\r\n export const getGifs = async (category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=5&api_key=MkEWuy2jiuJnjQB5DJtEhjnozw4iawRx`;\r\n    const respuesta = await fetch(url);\r\n    const { data } = await respuesta.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n    \r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {title,url} ) => {\r\n\r\n    // console.log(id,title,url);\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDown\">\r\n            <img src= {url} alt={ title }></img>\r\n            <p className='pipo'>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:images,loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeInDown\" > {category} </h3>\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n            {\r\n                <div className=\"card-grid\">\r\n                    {\r\n                        images.map((img) => (\r\n                            <GifGridItem\r\n                                key={img.id}\r\n                                {...img}\r\n                            />\r\n                        ))\r\n                    }\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n            .then(imgs => {\r\n\r\n                setTimeout(() => {\r\n\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n\r\n                }, 1000);\r\n\r\n\r\n\r\n\r\n            })\r\n\r\n    }, [category])\r\n\r\n    return state; //data{}, loading: true\r\n\r\n}\r\n\r\n\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './Components/AddCategory'\r\nimport { GifGrid } from './Components/GifGrid'\r\n// import PropTypes from 'prop-types'\r\n\r\nconst GiftExpertApp = () => {\r\n\r\n\r\n    const [categories, setCategories] = useState(['Pandas'])\r\n\r\n    /*  const handleAdd =()=>{\r\n \r\n         // setCategories( [...categories,'Hisotrias de Fantasmas']); //una forma de agregar elementos a un arreglo, seria recibiendolos 1 x 1 con el operador spred, y a su vez, recordar que setState, pisa el valor inicial, asique habria que indicar que se va a seguir utilizando un arreglo.\r\n          setCategories( (categorias)=> [...categorias,'Hisotrias de Fantasmas']); \r\n \r\n         \r\n     } */\r\n\r\n\r\n\r\n    //para mandar elemntos de un componente a otro, los puedo pasar como propiedades\r\n    //add category es el componente que se utiliza para colocar el input de busqueda y tomar las diferentes peticiones de gifs\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            \r\n            <AddCategory setCategories={setCategories} />\r\n            {/* <AddCategory /> */}\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    categories.map(category =>(\r\n                        <GifGrid \r\n                        key={category}\r\n                        category={category} />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n/* GiftExpertApp.propTypes = {\r\n\r\n} */\r\n\r\nexport default GiftExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GiftExpertApp from './GiftExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n\n  <GiftExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}